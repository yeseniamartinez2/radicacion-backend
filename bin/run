#!/usr/bin/env node

const http = require('http');
const Sequelize = require('sequelize');

const db_config = require('../db_config')[process.env.NODE_ENV || 'development'];

const log = db_config.log();
const App = require('../app')

const sequelize = new Sequelize(db_config.mysql.options);

function connectToMysql() {
  sequelize.authenticate().then(() => {
    log.info('Connection has been established successfully.');      
  }).catch((error) => {
    log.error('Unable to connect to the database:', error);
    process.exit(1);
  });

  return sequelize;
}

const mysqlClient = connectToMysql();
db_config.mysql.client = mysqlClient;

const app = App(db_config);
const port = process.env.PORT || "3000";
app.set("port", port);
const server = http.createServer(app);

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }
  const bind = typeof port === "string" ? `Pipe ${port}` : `Port  ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      log.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case "EADDRINUSE":
      log.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

server.on("error", onError);
server.on('listening', () => {
  log.info(
    `Hi there! I'm listening on port ${server.address().port} in ${app.get('env')} mode.`,
  );
});

server.listen(process.env.PORT || 3000);